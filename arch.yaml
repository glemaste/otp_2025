{{include_text('defines.yaml')}}

architecture:
  nodes: &macro # TOP MACRO
  # ===========================================================================
  - !Container # Macro top-level
    name: macro
    <<<: [*container_defaults]
    attributes:
      technology: TECHNOLOGY

  - !Component # Global buffer stores inputs operands.
    name: global_buffer
    <<<: [*component_defaults]
    subclass: albireo_sram
    attributes:
      depth: round(32768 * GLB_DEPTH_SCALE)
      width: 128
      n_banks: 32
      datawidth: 1
    constraints: 
      dataspace: {keep_only: [Inputs, Outputs]}
      temporal: 
        factors_only: [M=-1, C=-1, P=-1, Q=-1, N=-1, R=-1, S=-1]
        factors: []
        no_iteration_over_dataspaces: !nomerge [] # Overwrite default
        permutation: [N, P, Q, M, C, R, S] # Weight stationary

  - !Component # DAC supplies analog input values.
    name: input_dac
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: dac_albireo
    attributes: {width: ENCODED_INPUT_BITS}

  - !Container # Tile contains weight cache and works on one set of outputs
    name: WSPG
    <<<: [*container_defaults]
    spatial: {meshX: N_WSPG}
    constraints:
      spatial:
        no_reuse: [Outputs, Weights]
        no_iteration_over_dataspaces: [Inputs]
        maximize_dims: [[M]]
    
  - !Component # LiNbO3 electro-optic modulator modulates input light using the values from the input dac.
    name: input_linbo3_modulator
    subclass: albireo_mzm
    <<<: [*component_defaults, *keep_inputs, *no_temporal_reuse]
    attributes: {width: ENCODED_INPUT_BITS, n_instances: 16}

  - !Component # Weight cache stores weights.
    name: weight_cache
    <<<: [*component_defaults, *keep_weights]
    subclass: albireo_sram
    attributes:
      depth: 4096
      width: 64
      datawidth: 8               # To ensure that we can run weight-stationary
      multiple_buffering: 0.0001 # (as assumed in the Albireo paper)
    constraints: 
      temporal: 
        factors_only: [M=-1]
        factors: []
        no_iteration_over_dataspaces: !nomerge [] # Overwrite default

  - !Component # Output buffer stores outputs.
    name: output_regs
    <<<: [*component_defaults, *keep_outputs]
    subclass: albireo_sram
    attributes: {depth: 1, width: 16, datawidth: 1}
    constraints: 
      dataspace: {keep_only: [Outputs]}

  - !Component # ADC
    name: adc
    <<<: [*component_defaults, *keep_outputs, *no_temporal_reuse]
    subclass: adc
    attributes: {<<<: *cim_component_attributes}

  - !Component # The time integrating receiver CAN coalesce outputs.
    name: time_integrating_receiver
    <<<: [*component_defaults, *keep_outputs, *no_temporal_reuse]
    subclass: albireo_tia
    attributes: {width = 64, n_instances = N_ADC_PER_BANK}

  - !Component # Passive wave-division multiplexer which uses a free-space grating.
    name: WDM
    <<<: [*component_defaults, *keep_inputs, *no_temporal_reuse]
    subclass: albireo_awg
    attributes: 
      width: ENCODED_INPUT_BITS

  - !ArrayContainer # Each row works on a different column of the filter weights.
    name: row
    <<<: [*container_defaults, *spatial_must_reuse_outputs]
    spatial: {meshY: 16} #Should be N_ROWS, but pre-filled to fix a bug.
    
  - !Component # DAC supplies analog weight values.
    name: weight_dac
    <<<: [*component_defaults, *keep_weights, *no_coalesce]
    subclass: dac_albireo
    attributes: {width: ENCODED_WEIGHT_BITS}

  - !Component # This LiNbO3 electro-optic modulator modulates light using the values from the weight dac. The light is now double-modulated (multiplied input and weight). Modify the subclasses of the two ports for seperate energy per port.
    name: weight_linbo3_modulator
    subclass: albireo_mzm
    <<<: [*component_defaults, *keep_weights, *no_temporal_reuse]
    attributes: {width: ENCODED_WEIGHT_BITS, n_instances: 16}
  - !Component 
    name: weight_linbo3_modulator_input_port
    subclass: albireo_mzm
    <<<: [*component_defaults, *keep_inputs, *no_temporal_reuse]
    attributes: {width: ENCODED_WEIGHT_BITS}

  - !Component #Route data, f(\theta, \lambda)
    name: dispersive_grating
    subclass: albireo_awg
    <<<: [*component_defaults, *keep_inputs, *keep_weights, *no_coalesce]
    attributes: {width: ENCODED_INPUT_BITS}

  - !ArrayContainer # Each column works on a different output. We try to have different columns work on different
                    # Ps in the output so that we can get input reuse among neighboring rows (over which we map R).
    name: column
    <<<: [*container_defaults, *spatial_must_reuse_weights]
    spatial: {meshX: 16} #Should be N_COLUMNS, but pre-filled to fix a bug.

  - !Component # Put laser down here -> power is proportional to the number of endpoints, same laser used as alberio.
    name: laser
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: albireo_laser
    attributes:
      width: ENCODED_INPUT_BITS
      power_gated_at: "global_buffer" # Laser is on or off for the whole chip

  - !Hierarchical           # Virtualize an XxYxZ-bit MAC as multiple MAC units.
    nodes: *virtualized_mac # Defined in include/defines.yaml.